/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pantallas.agente;

import clases.ErroresSiapo;
import clases.Location;
import clases.Orden;
import clases.Razon;
import clases.Usuario;
import com.mxrck.autocompleter.TextAutoCompleter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Hashtable;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultEditorKit;
import pantallas.emergentes.Hilo;
import pantallas.general.MenuPpal;
import pantallas.mensajeria.NotificacionNueva;
import pantallas.mensajeria.errorNuevo;

/**
 *
 * @author Administrador
 */
public final class RegistroDeOrdenesProcesadas extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form RegistroDeOrdenesProcesadas
     */
    private boolean cancelar;
    private boolean detener;
    private boolean cerrando;
    public String specAlmacenado;
    public Thread h;
    public errorNuevo e;
    public TrayIcon trayIcon;
    private Location l;
    private final Usuario u;
    private ArrayList<Location> listaDeLocations = new ArrayList();
    public Calendar c;
    public boolean primeraVez;
    public boolean primerIngreso;
    String anterior;
    String actual;
    SystemTray tray;
    public NotificacionNueva n;
    public errorNuevo er;
    boolean almacenado;
    public TextAutoCompleter codigoRazon;
    private final Orden ordenActual = new Orden();
    Hilo ventanaEmergente;

    public RegistroDeOrdenesProcesadas(Usuario u, NotificacionNueva n, errorNuevo e) {
        c = Calendar.getInstance();
        this.u = new Usuario();
        this.u.setUser(u.getUser());
        this.u.setNombreUsuario(u.getNombreUsuario());
        this.u.setListaTiposUsuario(u.getListaTiposUsuario());
        this.l = new Location();
        this.e = e;
        this.n = n;
        this.tray = n.getTray();
        this.primerIngreso = true;
        initComponents();
        l.llenarTablaLocations(listaLocation);
        listaLocations.setSize(800, 600);
        listaLocations.setLocationRelativeTo(null);
        ///escogiendo la primera location       
        listaLocations.setVisible(true);
        iconoBarra();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listaDeOrdenes = new javax.swing.JFrame("LowerRightFrame");
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaOrdenes = new javax.swing.JTable();
        cambiar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        cb_tipoOrden = new javax.swing.JComboBox();
        locations = new javax.swing.JComboBox();
        comentaAgente = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        spec = new javax.swing.JTextField();
        agregar = new javax.swing.JButton();
        quitar = new javax.swing.JButton();
        buscar = new javax.swing.JTextField();
        buscar_btn = new javax.swing.JToggleButton();
        listaLocations = new javax.swing.JFrame();
        jPanel15 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        aceptar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaLocation = new javax.swing.JTable();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        cortar = new javax.swing.JMenuItem();
        copiar = new javax.swing.JMenuItem();
        pegar = new javax.swing.JMenuItem();
        jFrame1 = new javax.swing.JFrame();
        jPanelSpecimen = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jDialogComentario = new javax.swing.JDialog();
        jDialogRazon = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jDialogTerminar = new javax.swing.JButton();
        JDialogCancelarRazon = new javax.swing.JButton();
        jDialogAceptar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tipoOrden = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        comentario = new javax.swing.JTextField();
        nombreLocation = new javax.swing.JComboBox();
        specimen = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        ingresarOrden = new javax.swing.JButton();
        definirLocation = new javax.swing.JButton();
        listaProcesadas = new javax.swing.JButton();
        cancelarRegistro = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historial = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        nada = new javax.swing.JLabel();
        incompletas = new javax.swing.JLabel();
        completas = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        registro = new javax.swing.JButton();
        menu = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();

        listaDeOrdenes.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        listaDeOrdenes.setTitle("Lista de Ordenes Procesadas");
        listaDeOrdenes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listaDeOrdenes.setResizable(false);
        listaDeOrdenes.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                listaDeOrdenesWindowClosing(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(60, 117, 207));

        jPanel9.setBackground(new java.awt.Color(47, 63, 79));

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(jLabel18))
        );

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Ordenes Procesadas");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(94, 112, 144));
        jPanel11.setForeground(new java.awt.Color(94, 112, 144));

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Universidad de El Salvador ©Copyright 2013 ");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        listaOrdenes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Specimen", "Location", "Tipo", "Inicio", "Fin", "Razones de envio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listaOrdenes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaOrdenesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listaOrdenes);
        if (listaOrdenes.getColumnModel().getColumnCount() > 0) {
            listaOrdenes.getColumnModel().getColumn(0).setPreferredWidth(65);
            listaOrdenes.getColumnModel().getColumn(1).setPreferredWidth(147);
            listaOrdenes.getColumnModel().getColumn(2).setPreferredWidth(135);
            listaOrdenes.getColumnModel().getColumn(3).setPreferredWidth(56);
            listaOrdenes.getColumnModel().getColumn(4).setPreferredWidth(56);
            listaOrdenes.getColumnModel().getColumn(5).setPreferredWidth(338);
        }

        cambiar.setText("Cambiar Orden");
        cambiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarActionPerformed(evt);
            }
        });

        borrar.setText("Borrar Orden");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos de la Orden", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N
        jPanel18.setToolTipText("");
        jPanel18.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel18.setName(""); // NOI18N

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel27.setText("Location:");

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel28.setText("Tipo De Orden:");

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("Código(s) de razón(es):");

        cb_tipoOrden.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Completa", "Regresada Incompleta", "Regresada sin hacer nada" }));
        cb_tipoOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_tipoOrdenActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("Specimen:");

        spec.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                specMouseClicked(evt);
            }
        });

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        quitar.setText("Quitar");
        quitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(spec, javax.swing.GroupLayout.DEFAULT_SIZE, 8, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_tipoOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(locations, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(comentaAgente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(agregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quitar)))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(cb_tipoOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(locations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(spec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comentaAgente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregar)
                    .addComponent(quitar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buscarMouseClicked(evt);
            }
        });

        buscar_btn.setText("Buscar");
        buscar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscar_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listaDeOrdenesLayout = new javax.swing.GroupLayout(listaDeOrdenes.getContentPane());
        listaDeOrdenes.getContentPane().setLayout(listaDeOrdenesLayout);
        listaDeOrdenesLayout.setHorizontalGroup(
            listaDeOrdenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(listaDeOrdenesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listaDeOrdenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaDeOrdenesLayout.createSequentialGroup()
                        .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscar_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(148, 148, 148)
                        .addComponent(cambiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(borrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        listaDeOrdenesLayout.setVerticalGroup(
            listaDeOrdenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaDeOrdenesLayout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listaDeOrdenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borrar)
                    .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscar_btn)
                    .addComponent(cambiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        listaLocations.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        listaLocations.setTitle("Lista de Locations");
        listaLocations.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listaLocations.setResizable(false);
        listaLocations.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                listaLocationsWindowClosing(evt);
            }
        });

        jPanel15.setBackground(new java.awt.Color(94, 112, 144));
        jPanel15.setForeground(new java.awt.Color(94, 112, 144));

        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Universidad de El Salvador ©Copyright 2013 ");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.setBackground(new java.awt.Color(60, 117, 207));

        jPanel13.setBackground(new java.awt.Color(47, 63, 79));

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(jLabel19))
        );

        jLabel20.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Ordenes Procesadas");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel20)
                .addContainerGap())
        );

        jPanel14.setBackground(new java.awt.Color(60, 117, 207));

        jPanel17.setBackground(new java.awt.Color(47, 63, 79));

        jLabel22.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(jLabel22))
        );

        jLabel23.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Lista de Locations");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel23)
                .addContainerGap())
        );

        aceptar.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        aceptar.setText("Aceptar");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        listaLocation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Location", "Prioridad", "Codigo Location USA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(listaLocation);
        if (listaLocation.getColumnModel().getColumnCount() > 0) {
            listaLocation.getColumnModel().getColumn(0).setResizable(false);
            listaLocation.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout listaLocationsLayout = new javax.swing.GroupLayout(listaLocations.getContentPane());
        listaLocations.getContentPane().setLayout(listaLocationsLayout);
        listaLocationsLayout.setHorizontalGroup(
            listaLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(listaLocationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(listaLocationsLayout.createSequentialGroup()
                .addGap(358, 358, 358)
                .addComponent(aceptar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(listaLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(listaLocationsLayout.createSequentialGroup()
                    .addGap(222, 222, 222)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(222, 222, 222)))
        );
        listaLocationsLayout.setVerticalGroup(
            listaLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaLocationsLayout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aceptar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(listaLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(listaLocationsLayout.createSequentialGroup()
                    .addGap(234, 234, 234)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        cortar.setText("Cortar");
        jPopupMenu1.add(cortar);

        copiar.setText("Copiar");
        jPopupMenu1.add(copiar);

        pegar.setText("Pegar");
        jPopupMenu1.add(pegar);

        jFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jFrame1.setAlwaysOnTop(true);
        jFrame1.setEnabled(false);
        jFrame1.setResizable(false);

        jLabel26.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("12344789");

        javax.swing.GroupLayout jPanelSpecimenLayout = new javax.swing.GroupLayout(jPanelSpecimen);
        jPanelSpecimen.setLayout(jPanelSpecimenLayout);
        jPanelSpecimenLayout.setHorizontalGroup(
            jPanelSpecimenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 230, Short.MAX_VALUE)
            .addGroup(jPanelSpecimenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelSpecimenLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanelSpecimenLayout.setVerticalGroup(
            jPanelSpecimenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(jPanelSpecimenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelSpecimenLayout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(jLabel26)
                    .addContainerGap(23, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelSpecimen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelSpecimen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jDialogComentario.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialogComentario.setTitle("Ingrese razón de envio");
        jDialogComentario.setModal(true);
        jDialogComentario.setResizable(false);
        jDialogComentario.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jDialogComentarioWindowClosing(evt);
            }
        });

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("Por favor ingrese el codigo de la razón para orden regresada");

        jDialogTerminar.setText("Terminar");
        jDialogTerminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDialogTerminarActionPerformed(evt);
            }
        });

        JDialogCancelarRazon.setText("Cancelar");
        JDialogCancelarRazon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JDialogCancelarRazonActionPerformed(evt);
            }
        });

        jDialogAceptar.setText("Aceptar");
        jDialogAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDialogAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogComentarioLayout = new javax.swing.GroupLayout(jDialogComentario.getContentPane());
        jDialogComentario.getContentPane().setLayout(jDialogComentarioLayout);
        jDialogComentarioLayout.setHorizontalGroup(
            jDialogComentarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogComentarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogComentarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(jDialogRazon)
                    .addGroup(jDialogComentarioLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jDialogAceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDialogTerminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JDialogCancelarRazon)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jDialogComentarioLayout.setVerticalGroup(
            jDialogComentarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogComentarioLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDialogRazon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDialogComentarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JDialogCancelarRazon)
                    .addComponent(jDialogAceptar)
                    .addComponent(jDialogTerminar))
                .addGap(29, 29, 29))
        );

        jLabel32.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("12344789");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 228, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(jLabel32)
                    .addContainerGap(25, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro y Gestión de Ordenes Procesadas - Registrar Ordenes - SIAPO");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Orden Actual", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Specimen");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Location");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Tipo de Orden Procesada");

        tipoOrden.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoOrden.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Completa", "Regresada Incompleta", "Regresada sin hacer nada" }));
        tipoOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoOrdenActionPerformed(evt);
            }
        });

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Comentario");

        comentario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comentario.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        nombreLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreLocationActionPerformed(evt);
            }
        });

        specimen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nombreLocation, 0, 208, Short.MAX_VALUE)
                    .addComponent(specimen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comentario, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(specimen, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel9)
                        .addComponent(tipoOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10)
                    .addComponent(comentario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(94, 112, 144));
        jPanel5.setForeground(new java.awt.Color(94, 112, 144));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Universidad de El Salvador ©Copyright 2013 ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ingresarOrden.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        ingresarOrden.setText("Ingresar orden");
        ingresarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarOrdenActionPerformed(evt);
            }
        });

        definirLocation.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        definirLocation.setText("Cambiar Location");
        definirLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                definirLocationActionPerformed(evt);
            }
        });

        listaProcesadas.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        listaProcesadas.setText("Lista ordenes");
        listaProcesadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaProcesadasActionPerformed(evt);
            }
        });

        cancelarRegistro.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        cancelarRegistro.setText("Cancelar registro");
        cancelarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarRegistroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addComponent(ingresarOrden)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(definirLocation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listaProcesadas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelarRegistro)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ingresarOrden)
                    .addComponent(definirLocation)
                    .addComponent(listaProcesadas)
                    .addComponent(cancelarRegistro))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Historial de orden", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        historial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        historial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "user", "Hora Inicio", "Hora Finalizacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(historial);
        if (historial.getColumnModel().getColumnCount() > 0) {
            historial.getColumnModel().getColumn(0).setResizable(false);
            historial.getColumnModel().getColumn(0).setPreferredWidth(10);
            historial.getColumnModel().getColumn(1).setResizable(false);
            historial.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Totales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Ordenes Procesadas:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Sin hacer nada:");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Incompletas:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Completas:");

        total.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        total.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        total.setText("200");

        nada.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nada.setText("200");

        incompletas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        incompletas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        incompletas.setText("200");

        completas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        completas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        completas.setText("200");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(5, 5, 5)
                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(5, 5, 5)
                .addComponent(nada, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(5, 5, 5)
                .addComponent(incompletas, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(completas, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nada, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(incompletas, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(completas, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jPanel2.setBackground(new java.awt.Color(60, 117, 207));

        jPanel3.setBackground(new java.awt.Color(47, 63, 79));

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText(Integer.toString(c.get(Calendar.DATE))+"-"+Integer.toString(c.get(Calendar.MONTH)+1)+"-"+Integer.toString(c.get(Calendar.YEAR)));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        try{
            jLabel17.setText(this.u.getNombreUsuario()+"-"+this.u.getListaTiposUsuario().get(0).getNombreTipo()+"-"+this.u.getListaTiposUsuario().get(1).getNombreTipo());
        }catch(Exception e){
            jLabel17.setText(this.u.getNombreUsuario()+"-"+this.u.getListaTiposUsuario().get(0).getNombreTipo());
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jLabel12))
        );

        jPanel16.setBackground(new java.awt.Color(94, 112, 144));
        jPanel16.setForeground(new java.awt.Color(94, 112, 144));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Registro y Gestión de Ordenes Procesadas - Registrar Ordenes");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
        );

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Logo HMCR.jpg"))); // NOI18N

        registro.setBackground(new java.awt.Color(60, 117, 207));
        registro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Window-Add-icon.png"))); // NOI18N
        registro.setBorderPainted(false);
        registro.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        registro.setMaximumSize(new java.awt.Dimension(113, 75));
        registro.setMinimumSize(new java.awt.Dimension(113, 75));
        registro.setPreferredSize(new java.awt.Dimension(113, 75));
        registro.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        menu.setBackground(new java.awt.Color(60, 117, 207));
        menu.setForeground(new java.awt.Color(60, 117, 207));
        menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/1378460112_home.png"))); // NOI18N
        menu.setBorderPainted(false);
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Menú principal");

        jLabel24.setBackground(new java.awt.Color(255, 255, 255));
        jLabel24.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Registrar Ordenes");

        jLabel25.setBackground(new java.awt.Color(255, 255, 255));
        jLabel25.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(registro, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel24)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel25)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(registro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(menu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(162, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(163, Short.MAX_VALUE))
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setBounds(0, 0, 1016, 719);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        comprobarSalida();
        tray.remove(trayIcon);
        tray.remove(n.getTrayIcon());
        detener();
        ventanaEmergente.cerrarVentana();
    }//GEN-LAST:event_formWindowClosing


    private void ingresarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarOrdenActionPerformed
        ingresarOrden(false);
    }//GEN-LAST:event_ingresarOrdenActionPerformed

    private void cancelarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarRegistroActionPerformed
        if (this.specimen.getText().isEmpty() && this.historial.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "No hay registro que cancelar",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int resulta = 0;
            if (!cerrando) {
                resulta = JOptionPane.showConfirmDialog(null, "Desea cancelar el specimen: "
                        + this.specAlmacenado, "Cancelar registro specimen",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            }
            if (resulta == JOptionPane.YES_OPTION) {
                Orden o = new Orden();
                o.setSpecimen(specAlmacenado);
                o.setTipoOrden(this.tipoOrden.getSelectedIndex() + 1);
                if (o.borrarOrden(u.getUser())) {
                    JOptionPane.showMessageDialog(null, "Se ha cancelado el registro",
                            "Cancelar registro de orden", JOptionPane.INFORMATION_MESSAGE);
                    if (!cerrando) {
                        u.inicializarPortapapeles("00000000");
                        inicializarPortapapeles(true);
                        actualizarInformacion(false);
                        this.ventanaEmergente.agregarTexto("ORDEN " + o.getSpecimen() + " CANCELADA", 2);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo cancelar el registro",
                            "Cancelar registro de orden", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_cancelarRegistroActionPerformed

    private void listaProcesadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaProcesadasActionPerformed
        actualizarListaRegistro();
        listaDeOrdenes.setSize(800, 600);
        listaDeOrdenes.setLocationRelativeTo(null);
        listaDeOrdenes.setVisible(true);
    }//GEN-LAST:event_listaProcesadasActionPerformed

    private void listaDeOrdenesWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_listaDeOrdenesWindowClosing
        u.limpiarTabla(listaOrdenes);
    }//GEN-LAST:event_listaDeOrdenesWindowClosing

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        boolean bien = true;
        String nombre = "";
        try {
            nombre = String.valueOf(listaLocation.getValueAt(listaLocation.getSelectedRow(), 0));
        } catch (Exception ex) {
            bien = false;
        }
        if (bien) {
            cancelar = false;
            detener = false;
            almacenado = false;
            cerrando = false;
            this.listaLocations.dispose(); // primero que se cierre la ventana
            if (primerIngreso) {
                u.inicializarPortapapeles("00000000");
                //inicializa el protapapeles
                inicializarPortapapeles(true);
                //se inicializa hilo para grabar el primer numero de specimen ingresado
                this.h = new Thread(this, "registro");
                h.setPriority(Thread.MAX_PRIORITY);
                h.start();
                // de base de datos
                llenarTotales();
                listaDeLocations = l.obtenerLocations();
                l.llenarComboBoxLocations(locations, listaDeLocations);
                l.llenarComboBoxLocations(nombreLocation, listaDeLocations);
                codigoRazon = new TextAutoCompleter(jDialogRazon);
                autocompletar();
                // de no base de datos
                primerIngreso = false;
                inicializar();
                listaDeOrdenes.setSize(800, 600);
                listaDeOrdenes.setLocationRelativeTo(null);
                setSize(1024, 680);
                setLocationRelativeTo(null);
                this.ordenActual.setRazones(new ArrayList());
                inicializarVentanaEmergente();
                this.ventanaEmergente.agregarTexto("Se ha minimizado SIAPO."
                        + "\nPuede ver la lista de sus ordenes procesadas en la opcion "
                        + "de la lista de ordenes del icono de SIAPO (el de abajo clic derecho sobre el icono)"
                        + " y puede cerrar la ventana de lista de ordenes sin ningun problema", 3);
                ventanaEmergente.start();
            } else {
                if (!this.specimen.getText().equals("")) {
                    // la location anterior
                    ingresarOrden(true);
                }
            }
            nombreLocation.setSelectedItem(nombre);
        } else {
            JOptionPane.showMessageDialog(null, "Tiene que elegir una location", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_aceptarActionPerformed

    private void definirLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_definirLocationActionPerformed
        listaLocations.setVisible(true);
    }//GEN-LAST:event_definirLocationActionPerformed

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        comprobarSalida();
        this.tray.remove(trayIcon);
        detener();
        ventanaEmergente.cerrarVentana();
        this.listaDeOrdenes.dispose();
        new MenuPpal(u, false, this.n, this.e).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menuActionPerformed

    private void tipoOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoOrdenActionPerformed
        Boolean a = this.specimen.getText().isEmpty(), b = this.historial.getRowCount() > 0;
        if (!a && b) {
            if (this.tipoOrden.getSelectedIndex() > 0) {
                this.jDialogComentario.setSize(340, 140);
                this.jDialogComentario.setLocationRelativeTo(null);
                this.jDialogComentario.setVisible(true);           
            } else {
                this.comentario.setText("");
                this.ordenActual.setComentarioAgente("");
                this.ordenActual.getRazones().clear();
            }
        }
    }//GEN-LAST:event_tipoOrdenActionPerformed

    private void listaLocationsWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_listaLocationsWindowClosing
        if (this.primerIngreso) {
            this.listaLocations.dispose();
            this.listaDeOrdenes.dispose();
            this.dispose();
            new MenuPpal(u, false, this.n, this.e).setVisible(true);
        }
    }//GEN-LAST:event_listaLocationsWindowClosing

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_formWindowIconified

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        // TODO add your handling code here:
        int t[];
        t = listaOrdenes.getSelectedRows();
        if (t.length > 1) {
            JOptionPane.showMessageDialog(null, "Ha seleccionado varios specimen por favor solo seleccione uno", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (t.length == 1) {
                if (listaOrdenes.getSelectedRow() != 0 || specimen.getText().isEmpty()) {
                    // esto es para permitir que copie otra vez el num de specimen de primero
                    if (listaOrdenes.getSelectedRow() == 0) {
                        this.specAlmacenado = "00000000";
                    }
                    String sp = listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 0).toString();
                    int resulta = JOptionPane.showConfirmDialog(null, "¿Esta seguro?", "Eliminar registro de orden",
                            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (resulta == JOptionPane.YES_OPTION) {
                        Orden o = new Orden();
                        o.setSpecimen(sp);
                        if (listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 2).toString().equals("Completa")) {
                            o.setTipoOrden(1);
                        } else {
                            if (listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 2).toString().equals("Regresada Incompleta")) {
                                o.setTipoOrden(2);
                            } else {
                                o.setTipoOrden(3);
                            }
                        }
                        // comprobar si la orden contiene errores
                        if (!o.contieneErrores()) {
                            // comprobar si es una orden auditada
                            if (!o.estaAuditada()) {
                                o.borrarOrden(u.getUser());
                                this.inicializarPortapapeles(false);
                                JOptionPane.showMessageDialog(null, " Registro de orden borrado", "Eliminar registro de Orden", JOptionPane.INFORMATION_MESSAGE);
                                actualizarListaRegistro();
//                                this.listaDeOrdenes.repaint();
//                                listaOrdenes.repaint();
                                llenarTotales();
                                trayIcon.setToolTip("PR:" + this.total.getText() + " CO:" + this.completas.getText() + " IN:" + this.incompletas.getText() + " SN:" + this.nada.getText());
                            } else {
                                JOptionPane.showMessageDialog(null, " La orden ya fue auditada asi que no puede ser eliminado el registro", "Error", JOptionPane.INFORMATION_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, " La orden contiene errores asi que no puede ser eliminado el registro", "Error", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, " La orden que quiere borrar es la que se esta procesando actualmente", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione una orden primero", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_borrarActionPerformed

    private void cambiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarActionPerformed
        // TODO add your handling code here:
        Orden o = new Orden();
        Location lo = new Location();
        String actualO = "";
        int i = 0;
        int t[];
        t = listaOrdenes.getSelectedRows();
        if (t.length > 1) {
            int resulta = JOptionPane.showConfirmDialog(null, "Ha seleccionado varios specimen solo se cambiara la location\n¿Desea continuar?", "Actualizar ordenes",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (resulta == JOptionPane.YES_OPTION) {
                lo.setNombreLocation(locations.getSelectedItem().toString());
                lo.setCodigoLocation();
                o.setCodigoLocation(lo.getCodigoLocation());
                do {
                    if (!specimen.getText().equals(listaOrdenes.getValueAt(t[i], 0).toString())) {
                        o.cambiarLocationOrden(listaOrdenes.getValueAt(t[i], 0).toString());
                    } else {
                        actualO = "\nSolo no se actualizo la orden que actualmente se esta procesando";
                    }
                    i++;
                } while (i < t.length);
                JOptionPane.showMessageDialog(null, "Ordenes actualizadas exitosamente" + actualO,
                        "Actualizar Ordenes", JOptionPane.INFORMATION_MESSAGE);
                actualizarListaRegistro();
                llenarTotales();
                trayIcon.setToolTip("PR:" + this.total.getText() + " CO:" + this.completas.getText() + " IN:" + this.incompletas.getText() + " SN:" + this.nada.getText());
            }
        } else {
            if (t.length == 1) {
                o.setSpecimen(listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 0).toString());
                if (specimen.getText().equals(o.getSpecimen())) {
                    JOptionPane.showMessageDialog(null, " La orden que quiere actualizar es la que se esta procesando actualmente", "Error", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    if (comentaAgente.getText().isEmpty() && (cb_tipoOrden.getSelectedIndex() == 1 || cb_tipoOrden.getSelectedIndex() == 2)) {
                        JOptionPane.showMessageDialog(null, "No se puede actualizar la orden porque ha indicado que es regresada incompleta o regresada sin hacer nada y no tiene razones",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        lo.setNombreLocation(locations.getSelectedItem().toString());
                        lo.setCodigoLocation();
                        o.setCodigoLocation(lo.getCodigoLocation());
                        o.setTipoOrden(cb_tipoOrden.getSelectedIndex() + 1);
                        if (o.getTipoOrden() == 2 || o.getTipoOrden() == 3) {
                            o.borrarMandadaPor(u.getUser());
                            String comentarioActual = this.comentaAgente.getText();
                            String comentarioDespues = "";
                            String[] razones = comentarioActual.split(",");
                            ArrayList<Razon> razoneslist = new ArrayList();
                            for (i = 0; i < razones.length; i++) {
                                if (i > 0) {
                                    comentarioDespues = comentarioDespues.concat(",");
                                }
                                Razon r = new Razon();
                                r.setCodigoRazon(razones[i]);
                                r.obtenerNombreRazon();
                                razoneslist.add(r);
                                comentarioDespues = comentarioDespues.concat(r.getNombreRazon());
                            }
                            if (!razoneslist.isEmpty()) {
                                o.setRazones(razoneslist);
                                o.mandadaPor(o.getSpecimen(), u.getUser());
                            }
                            o.setComentarioAgente(comentarioDespues);
                        } else {
                            o.setComentarioAgente(comentaAgente.getText());
                        }
                        if (o.actualizarOrden()) {
                            JOptionPane.showMessageDialog(null, "Orden actualizada exitosamente",
                                    "Actualizar Orden", JOptionPane.INFORMATION_MESSAGE);
                            actualizarListaRegistro();
                            llenarTotales();
                            trayIcon.setToolTip("Orden actual: " + this.specAlmacenado + "\nPR:" + this.total.getText() + " CO:" + this.completas.getText() + " IN:" + this.incompletas.getText() + " SN:" + this.nada.getText());
                        } else {
                            JOptionPane.showMessageDialog(null, "No se pudo actualizar la orden",
                                    "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "No ha seleccionado ninguna orden", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cambiarActionPerformed

    private void listaOrdenesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaOrdenesMouseClicked
        // TODO add your handling code here:
        String razones = "";
        locations.setSelectedItem(listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 1).toString());
        spec.setText(listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 0).toString());
        if (listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 2).toString().equals("Completa")) {
            cb_tipoOrden.setSelectedIndex(0);
            this.comentaAgente.setEnabled(true);
            this.agregar.setEnabled(false);
            this.quitar.setEnabled(false);
        } else {
            this.comentaAgente.setEnabled(false);
            this.agregar.setEnabled(true);
            this.quitar.setEnabled(true);
            Orden o = new Orden();
            o.setSpecimen(spec.getText());
            o.obtenerMandadaPor(u.getUser());
            for (int i = 0; i < o.getRazones().size(); i++) {
                if (i > 0) {
                    razones = razones + ",";
                }
                razones = razones + o.getRazones().get(i).getCodigoRazon();
            }
            if (listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 2).toString().equals("Regresada Incompleta")) {
                cb_tipoOrden.setSelectedIndex(1);
            } else {
                cb_tipoOrden.setSelectedIndex(2);
            }
        }
        comentaAgente.setText(razones);
    }//GEN-LAST:event_listaOrdenesMouseClicked

    private void buscar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscar_btnActionPerformed
        Orden o = new Orden();
        o.setSpecimen(this.buscar.getText());
        o.encontrarOrden(listaOrdenes);
        this.listaOrdenesMouseClicked(null);
    }//GEN-LAST:event_buscar_btnActionPerformed

    private void specMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_specMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_specMouseClicked

    private void buscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscarMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_buscarMouseClicked

    private void jDialogTerminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDialogTerminarActionPerformed
        // TODO add your handling code here:
        if (!this.jDialogRazon.getText().isEmpty()) {
            if (agregarRazonOrden()) {
                this.jDialogComentario.dispose();
            }
        } else {
            if (ordenActual.getRazones().isEmpty()) {
                int resulta = JOptionPane.showConfirmDialog(null, "Está por salir sin dejar razón. Si sale la orden sera puesta como procesada completa "
                        + "¿Salir?", "Razones de ordenes regresadas",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (resulta == JOptionPane.YES_OPTION) {
                    this.tipoOrden.setSelectedIndex(0);
                    this.jDialogComentario.dispose();
                }
            } else {
                this.jDialogComentario.dispose();
            }
        }
    }//GEN-LAST:event_jDialogTerminarActionPerformed

    private void JDialogCancelarRazonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JDialogCancelarRazonActionPerformed
        // TODO add your handling code here:
        this.jDialogRazon.setText("");
    }//GEN-LAST:event_JDialogCancelarRazonActionPerformed

    private void jDialogAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDialogAceptarActionPerformed
        // TODO add your handling code here:
        agregarRazonOrden();
    }//GEN-LAST:event_jDialogAceptarActionPerformed

    private void jDialogComentarioWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogComentarioWindowClosing
        // TODO add your handling code here:
        if (ordenActual.getRazones().isEmpty()) {
            this.tipoOrden.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jDialogComentarioWindowClosing

    private void cb_tipoOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_tipoOrdenActionPerformed
        // TODO add your handling code here:
        if ((this.cb_tipoOrden.getSelectedIndex() == 1 || this.cb_tipoOrden.getSelectedIndex() == 2)
                && !specimen.getText().equals(listaOrdenes.getValueAt(listaOrdenes.getSelectedRow(), 0).toString())) {
            this.agregar.setEnabled(true);
            this.quitar.setEnabled(true);
        } else {
            this.agregar.setEnabled(false);
            this.quitar.setEnabled(false);
        }
    }//GEN-LAST:event_cb_tipoOrdenActionPerformed

    private void quitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitarActionPerformed
        // TODO add your handling code here:
        String codigo = JOptionPane.showInputDialog(this.listaDeOrdenes, "Digite el codigo de la razon que desea quitar");
        if (!this.comentaAgente.getText().isEmpty()) {
            String comentarioActual = this.comentaAgente.getText();
            String comentarioDespues = "";
            String[] razones = comentarioActual.split(",");
            boolean existe = false;
            for (String razone : razones) {
                if (razone.equals(codigo)) {
                    existe = true;
                } else {
                    if (comentarioDespues.equals("")) {
                        comentarioDespues = comentarioDespues + razone;
                    } else {
                        comentarioDespues = comentarioDespues + "," + razone;
                    }
                }
            }
            if (existe) {
                this.comentaAgente.setText(comentarioDespues);
            } else {
                JOptionPane.showMessageDialog(null, "Codigo erroneo o no existe", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ya no hay razones que quitar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_quitarActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        // TODO add your handling code here:
        String codigo;
        codigo = JOptionPane.showInputDialog(this.listaDeOrdenes, "Digite el codigo de la razon que desea agregar");
        if (!codigo.isEmpty()) {
            Razon r = new Razon();
            r.setCodigoRazon(codigo);
            if (!r.validarRazon()) {
                if (this.comentaAgente.getText().isEmpty()) {
                    this.comentaAgente.setText(codigo);
                } else {
                    this.comentaAgente.setText(this.comentaAgente.getText().concat("," + codigo));
                }
            } else {
                JOptionPane.showMessageDialog(null, "Codigo erroneo o no existe", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_agregarActionPerformed

    private void nombreLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreLocationActionPerformed
        // TODO add your handling code here:
        l = l.buscarLocation(listaDeLocations, this.nombreLocation.getSelectedItem().toString());
    }//GEN-LAST:event_nombreLocationActionPerformed

    public Action getAccion(Action[] acciones, String nombreAccion) {
        Hashtable<Object, Action> acc = new Hashtable<>();
        for (Action accion : acciones) {
            acc.put(accion.getValue(Action.NAME), accion);
        }
        return acc.get(nombreAccion);
    }

    public void inicializar() {
        Action[] acciones = spec.getActions();
        copiar.setAction(getAccion(acciones, DefaultEditorKit.copyAction));
        copiar.setText("Copiar");
        pegar.setAction(getAccion(acciones, DefaultEditorKit.pasteAction));
        pegar.setText("Pegar");
        cortar.setAction(getAccion(acciones, DefaultEditorKit.cutAction));
        cortar.setText("Cortar");
    }

    public void iconoBarra() {
        if (SystemTray.isSupported()) {
            //tray = SystemTray.getSystemTray();
            //Se asigna la imagen que del tray icon  
            ImageIcon im = new ImageIcon(getClass().getResource("/iconos/Window-Add-icon.png"));
            //Este listener permite salir de la aplicacion  
            ActionListener exitListener;
            exitListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    comprobarSalida();
                    ventanaEmergente.cerrarVentana();
                    dispose();
                    tray.remove(n.getTrayIcon());
                    tray.remove(trayIcon);
                    detener();
                    System.exit(0);
                }
            };
            //   Cancelar automatizacion
            ActionListener detener1;
            detener1 = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (cancelar == false) {
                        cancelar = true;
                        ventanaEmergente.cambiarColor(2);
                        trayIcon.displayMessage("SIAPO - Registro de Ordenes", "Se ha detenido la automatizacion", TrayIcon.MessageType.INFO);
                    } else {
                        cancelar = false;
                        ventanaEmergente.cambiarColor(1);
                        inicializarPortapapeles(false);
                        if (!h.isAlive()) {
                            JOptionPane.showMessageDialog(null, "No estaba vivo");
                            h.start();
                        }
                        trayIcon.displayMessage("SIAPO - Registro de Ordenes", "Se ha activado la automatizacion", TrayIcon.MessageType.INFO);
                    }
                }
            };
            //Incompleta
            ActionListener a1;
            a1 = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    tipoOrden.setSelectedIndex(1);
                    //ventanaEmergente.cambiarColor(3);
                }
            };
            //nada
            ActionListener a2;
            a2 = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    tipoOrden.setSelectedIndex(2);
                    //ventanaEmergente.cambiarColor(3);
                }
            };
            //ingresar orden
            ActionListener a3;
            a3 = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    ingresarOrden(false);
                }
            };
            // Activar automatizacion
            ActionListener activar;
            activar = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (ventanaEmergente.estaVisible()) {
                        ventanaEmergente.cerrarVentana();
                    } else {
                        ventanaEmergente.abrirVentana();
                    }
                }
            };
            // locations
            ActionListener locat = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    definirLocation.doClick();
                }
            };
            //cancelar registro
            ActionListener cancel;
            cancel = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    cancelarRegistro.doClick();
                }
            };
            //lista de ordenes
            ActionListener abrirLista = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    actualizarListaRegistro();
                    listaDeOrdenes.setVisible(true);
                }
            };
            //Aquí se crea un popup menu  
            PopupMenu popup = new PopupMenu();
            MenuItem inc = new MenuItem("Poner Orden Incompleta");
            MenuItem nad = new MenuItem("Poner Orden sin hacer nada");
            MenuItem ingr = new MenuItem("Ingresar Orden");
            MenuItem ex = new MenuItem("Cancelar Registro");
            MenuItem b = new MenuItem("Cambiar Location");
            MenuItem d = new MenuItem("Activar/Detener Automatización");
            MenuItem a = new MenuItem("Mostrar/Ocultar Información de Orden");
            MenuItem lis = new MenuItem("Lista de ordenes");
            MenuItem defaultItem = new MenuItem("Salir de la aplicación");
            //Se le asigna al item del popup el listener para salir de la app  
            defaultItem.addActionListener(exitListener);
            d.addActionListener(detener1);
            a.addActionListener(activar);
            inc.addActionListener(a1);
            nad.addActionListener(a2);
            ingr.addActionListener(a3);
            b.addActionListener(locat);
            ex.addActionListener(cancel);
            lis.addActionListener(abrirLista);
            // se agregan al menu
            popup.add(inc);
            popup.add(nad);
            popup.add(ingr);
            popup.add(ex);
            popup.add(b);
            popup.add(a);
            popup.add(d);
            popup.add(lis);
            popup.add(defaultItem);
            /*Aqui creamos una instancia del tray icon y asignamos 
             La imagen, el nombre del tray icon y el popup*/
            trayIcon = new TrayIcon(im.getImage(), "SIAPO - Registro de Ordenes", popup);

            /*Creamos un acction listener que se ejecuta cuando le damos 
             doble click al try icon*/
            ActionListener actionListener;// es para mostrar la pantalla de registro
            actionListener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    setVisible(true);
                }
            };
            trayIcon.setImageAutoSize(true);
            trayIcon.addActionListener(actionListener);
            try {
                tray.add(trayIcon);
                //trayIcon.displayMessage("SIAPO - Registro de Ordenes", "Se a minimizado la pantalla puede seguir trabajando", TrayIcon.MessageType.INFO);
            } catch (Exception exe) {
                JOptionPane.showMessageDialog(this, "No se pudo ocupar el icono " + exe);
            }
        } else {
            System.err.println("El sistema no soporta los iconos en la barra de tareas.");
            System.exit(1);
        }
    }

    public void inicializarPortapapeles(boolean noConservarN) {
        if (noConservarN) {
            specAlmacenado = "00000000";
            primeraVez = true;
        }
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JDialogCancelarRazon;
    private javax.swing.JButton aceptar;
    private javax.swing.JButton agregar;
    private javax.swing.JButton borrar;
    private javax.swing.JTextField buscar;
    private javax.swing.JToggleButton buscar_btn;
    private javax.swing.JButton cambiar;
    private javax.swing.JButton cancelarRegistro;
    private javax.swing.JComboBox cb_tipoOrden;
    private javax.swing.JTextField comentaAgente;
    private javax.swing.JTextField comentario;
    private javax.swing.JLabel completas;
    private javax.swing.JMenuItem copiar;
    private javax.swing.JMenuItem cortar;
    private javax.swing.JButton definirLocation;
    private javax.swing.JTable historial;
    private javax.swing.JLabel incompletas;
    private javax.swing.JButton ingresarOrden;
    private javax.swing.JButton jDialogAceptar;
    private javax.swing.JDialog jDialogComentario;
    private javax.swing.JTextField jDialogRazon;
    private javax.swing.JButton jDialogTerminar;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelSpecimen;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JFrame listaDeOrdenes;
    private javax.swing.JTable listaLocation;
    private javax.swing.JFrame listaLocations;
    private javax.swing.JTable listaOrdenes;
    private javax.swing.JButton listaProcesadas;
    private javax.swing.JComboBox locations;
    private javax.swing.JButton menu;
    private javax.swing.JLabel nada;
    private javax.swing.JComboBox nombreLocation;
    private javax.swing.JMenuItem pegar;
    private javax.swing.JButton quitar;
    private javax.swing.JButton registro;
    private javax.swing.JTextField spec;
    private javax.swing.JLabel specimen;
    private javax.swing.JComboBox tipoOrden;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (!detener) {
            try {
                Thread.sleep(2000);
                if (!cancelar) {//1
                    String texto = u.obtenerCadenaPortapapeles();
                    if (!texto.equals("")) {//2
                        // validaciones del numero de specimen
                        if ((texto.length() == 7 || texto.length() == 8) && !texto.equals("00000000")) {//3
                            if (u.esNumero(texto)) {//4
                                if (!specAlmacenado.equalsIgnoreCase(texto)) {//5
                                    // PROCESO DE REGISTRO
                                    // si es el mismo user el que ya la ingreso no se registra
                                    //ordenActual.setSpecimen(texto);
                                    Boolean noMismo = ordenActual.noMismoUser(u.getUser(), texto);
                                    if (noMismo != null) {
                                        if (noMismo) {//6
                                            //comprobamos si es primera vez que se realiza la automatizacion
                                            boolean bien = true;
                                            if (primeraVez) {
                                                primeraVez = false;
                                            } else {
                                                //segun el valor de almacenado                                           
                                                bien = actualizarOrden();
                                            }
                                            if (bien) {
                                                limpiar();
                                                specAlmacenado = texto;
                                                ordenActual.setSpecimen(specAlmacenado);
                                                ordenActual.setTipoOrden(tipoOrden.getSelectedIndex() + 1);
                                                ordenActual.setCodigoLocation(l.getCodigoLocation());
                                                ordenActual.setComentarioAgente(comentario.getText());
                                                // comprobamos si la orden ya tiene registro he ingresamos la orden
                                                Boolean comprobar = ordenActual.ingresarRegistro(u.getUser(), this.trayIcon);
                                                if (comprobar != null) {
                                                    // la orden no se ha registrado aun
                                                    almacenado = comprobar;
                                                    specimen.setText(texto);// ponemos el specimen en el label 
                                                    actualizarInformacion(true);
                                                } else {
                                                    // la orden ya se ha registrado. solo inicializamos el portapapeles
                                                    inicializarPortapapeles(true);
                                                }
                                            } else {
                                                //JOptionPane.showMessageDialog(null, "No se pudo terminar de procesar la orden");
                                            }
                                        } else {
                                            specAlmacenado = texto;
                                        }
                                    } else {
                                        //JOptionPane.showMessageDialog(null, "Trate de copiar de nuevo el numero de specimen");
                                    }
                                }
                            }
                        }
                    }
                }
            } catch (Exception ex) {
                if (h.isInterrupted()) {
                    ec();
                } else {
                    ErroresSiapo.agregar(ex, "codigo 35");
                    //JOptionPane.showMessageDialog(null, "No interrumpido pero hay exception " + ex);
                }
            }
        }
    }

    public void ec() {
        this.h = new Thread(this, "registro");
        h.setPriority(Thread.MAX_PRIORITY);
        h.start();
    }

    public void detener() {
        this.detener = true;
    }

    public void actualizarInformacion(boolean completo) {
        ordenActual.limpiarTabla(historial);
        if (completo) {
            this.ordenActual.obtenerInfoOrden(historial, nombreLocation, tipoOrden);
            //historial.repaint();       
            actualizarVentanaEmergente();
        } else {
            limpiar();
        }
        llenarTotales();
        trayIcon.setToolTip("PR:" + this.total.getText() + " CO:" + this.completas.getText() + " IN:" + this.incompletas.getText() + " SN:" + this.nada.getText());
        if (this.listaDeOrdenes.isVisible()) {
            actualizarListaRegistro();

        }
    }

    private void limpiar() {
        specimen.setText("");
        tipoOrden.setSelectedIndex(0);
        comentario.setText("");
    }

    public void comprobarSalida() {
        if (!specimen.getText().isEmpty()) {
            int resulta = JOptionPane.showConfirmDialog(null, "Está por cerrar la aplicación y tiene una orden sin procesar "
                    + "¿Desea ingresar la orden?", "Eliminar registro de orden",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (resulta == JOptionPane.YES_OPTION) {
                ingresarOrden(false);
            } else {
                this.cerrando = true;
                this.cancelarRegistro.doClick();
            }
        }
    }

    public void actualizarListaRegistro() {
        ordenActual.llenarTablaOrdenes(listaOrdenes, u.getUser(), "", "");
        //listaOrdenes.repaint();
    }

    private void llenarTotales() {
        int t[];
        t = ordenActual.cantidadTipoOrdenes(u.getUser(), "fecha = curdate()");
        if (t != null) {
            completas.setText(Integer.toString(t[0]));
            incompletas.setText(Integer.toString(t[1]));
            nada.setText(Integer.toString(t[2]));
            total.setText(Integer.toString(t[3]));
        }
    }

    private void autocompletar() {
        ResultSet r;
        try {
            r = u.seleccionar("codigoRazon,nombreRazon", "razon", "");
            r.beforeFirst();
            while (r.next()) {
                this.codigoRazon.addItem(r.getString("codigoRazon") + " -" + r.getString("nombreRazon"));
            }
        } catch (SQLException ex) {
        } finally {
            u.cerrarConexion();
            u.cerrarConexionBase();
        }
    }

    public boolean actualizarOrden() {
        this.ordenActual.setComentarioAgente(comentario.getText());
        //this.ordenActual.setCodigoLocation(l.getCodigoLocation());
        this.ordenActual.setTipoOrden(tipoOrden.getSelectedIndex() + 1);
        try {
            this.ordenActual.setSpecimen(specimen.getText());
        } catch (Exception ex) {
            this.ordenActual.setSpecimen(specAlmacenado);
        }
        return this.ordenActual.actualizarOrden(almacenado, u.getUser());
    }

    public void actualizarVentanaEmergente() {
        ventanaEmergente.cambiarColor(1);
        String texto = "SPECIMEN ACTUAL: " + this.specAlmacenado
                + " \nLOCATION: " + nombreLocation.getSelectedItem().toString() + " # " + l.getCodigoLocationUSA()
                + " \nTIPO DE ORDEN: " + tipoOrden.getSelectedItem().toString().toUpperCase();

        if (this.almacenado) {
            texto = texto + "\nHORA INICIO: " + this.historial.getValueAt(0, 1) + " HORA FIN: " + this.historial.getValueAt(0, 2)
                    + "\nINGRESADA POR: " + ordenActual.getUser().toUpperCase();
            ventanaEmergente.cambiarColor(4);
        } else {
            texto = texto + "\nHORA INICIO: " + this.historial.getValueAt(0, 1)
                    + "\n";
        }
        if (tipoOrden.getSelectedIndex() > 0) {
            ventanaEmergente.cambiarColor(3);
            texto = texto + "\nMANDADA POR: " + ordenActual.getComentarioAgente();
        }
        this.ventanaEmergente.agregarTexto(texto, 3);
    }

    public void ingresarOrden(boolean cambioLocation) {
        //cambio location es atributo que indica si es un ingreso porque cambio de location o no
        if (!specimen.getText().isEmpty() || this.historial.getRowCount() > 0) {
            boolean bien;
            bien = actualizarOrden();
            if (bien) {
                if (!cambioLocation) {
                    //solo se muestra este mensaje si no se ha cambiado de location
                    JOptionPane.showMessageDialog(null, "Orden ingresada exitosamente",
                            "Registro de orden", JOptionPane.INFORMATION_MESSAGE);
                }
                inicializarPortapapeles(false);
                limpiar();
                actualizarInformacion(false);
            } else {
                JOptionPane.showMessageDialog(null, "La orden no pudo ser ingresada correctamente",
                        "Error en registro de orden", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay orden almacenada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void inicializarVentanaEmergente() {
        //ventana emergente
        ventanaEmergente = new Hilo();
        ventanaEmergente.agregarTexto("", 3);
        ventanaEmergente.cambiarColor(1);
    }

    private boolean agregarRazonOrden() {
        boolean ingresado = ordenActual.agregarRazonOrden(jDialogRazon.getText());
        if (ingresado) {
            comentario.setText(ordenActual.getComentarioAgente());
            if (listaDeOrdenes.isVisible()) {
                listaOrdenes.setValueAt(tipoOrden.getSelectedItem().toString(), 0, 2);
                listaOrdenes.setValueAt(comentario.getText(), 0, 5);
            }
            this.jDialogRazon.setText("");
            actualizarVentanaEmergente();
        }
        return ingresado;
    }
}
